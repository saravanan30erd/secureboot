#!/bin/bash

set -euo pipefail

## Functions

generate_uefi_keys() {
  mkdir -p "$UEFI_KEYS_DIR"

  cd "$UEFI_KEYS_DIR"

  GUID="$(uuidgen --random)"
  echo "$GUID" > guid.txt

  echo "Generating the UEFI Secure Boot keys"
  read -p "Enter a Common Name: " NAME

  echo "Create Platform key..."
  openssl req -newkey rsa:4096 -nodes -keyout PK.key -new -x509 -sha256 -days 3650 \
              -subj "/CN=$NAME Platform Key/" -out PK.crt
  openssl x509 -outform DER -in PK.crt -out PK.cer
  cert-to-efi-sig-list -g $GUID PK.crt PK.esl
  sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth
  sign-efi-sig-list -c PK.crt -k PK.key PK /dev/null PK_null.auth

  echo "Create Key Exchange key..."
  openssl req -newkey rsa:4096 -nodes -keyout KEK.key -new -x509 -sha256 -days 3650 \
              -subj "/CN=$NAME Key Exchange Key/" -out KEK.crt
  openssl x509 -outform DER -in KEK.crt -out KEK.cer
  cert-to-efi-sig-list -g $GUID KEK.crt KEK.esl

  echo "Create signature database key..."
  openssl req -newkey rsa:4096 -nodes -keyout db.key -new -x509 -sha256 -days 3650 \
              -subj "/CN=$NAME Signature Database key/" -out db.crt
  openssl x509 -outform DER -in db.crt -out db.cer
  cert-to-efi-sig-list -g $GUID db.crt db.esl

  chmod 0400 *.{key,auth}
  echo "UEFI Secure Boot keys are created under '$UEFI_KEYS_DIR'."
}

enroll_uefi_keys() {
  cd "$UEFI_KEYS_DIR"

  echo "Enrolling Secure Boot keys in UEFI firmware"
  efi-updatevar -e -f KEK.esl KEK
  efi-updatevar -e -f db.esl db
  efi-updatevar -f PK.auth PK
  echo "Secure Boot keys in '$UEFI_KEYS_DIR' are registered."
}

sign_uefi_keys() {
  cd "$UEFI_KEYS_DIR"

  echo "Signing GRUB boot loader with UEFI Secure Boot keys"

  grub-mkconfig -o "$BOOT_DIR/grub/grub.cfg"
  grub-install --target=x86_64-efi --boot-directory="$BOOT_DIR" --efi-directory="$EFI_DIR" --bootloader-id="$UEFI_ID_GRUB"

  sbsign --key db.key --cert db.crt --output "$EFI_DIR/$UEFI_PATH_GRUB" "$EFI_DIR/$UEFI_PATH_GRUB"
  echo "GRUB boot loader is signed with UEFI Secure Boot keys."
}

verify_signatures() {
  echo "List the signatures in boot loader"
  sbverify --list "$EFI_DIR/$UEFI_PATH_GRUB"

  echo "Verifying the signature with UEFI keys"
  cd "$UEFI_KEYS_DIR"
  sbverify --cert db.crt "$EFI_DIR/$UEFI_PATH_GRUB"
}

list_uefi_keys() {
  echo "Listing the secure boot keys enrolled in firmware"
  efi-readvar
}

## Main

SB_CONFIG_FILE="/etc/secureboot.conf"


if [ -r "$SB_CONFIG_FILE" ]; then
  . "$SB_CONFIG_FILE"
else
  echo "Failed to read the secureboot configuration file '$SB_CONFIG_FILE'"
  exit 1
fi


case "$1" in
  generate-keys)
    generate_uefi_keys;
    ;;
  enroll-keys)
    enroll_uefi_keys;
    ;;
  sign-keys)
    sign_uefi_keys;
    ;;
  verify-bootloader)
    verify_signatures;
    ;;
  list-keys)
    list_uefi_keys;
    ;;
  *)
    echo
    echo "commands:"
    echo "  generate-keys       Generate the UEFI Secure Boot keys"
    echo "  enroll-keys         Enrolling secure boot keys in UEFI firmware"
    echo "  sign-keys           Signing the boot loader with secure boot keys"
    echo "  verify-bootloader   Verify the signed boot loader"
    echo "  list-keys           List all the secure boot keys enrolled in UEFI firmware"
    ;;
esac
